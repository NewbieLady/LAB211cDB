Consider the function 𝑓 ( 𝑛 ) = 3 𝑛 𝑙 𝑜 𝑔 2 ( 𝑛 ) + 100 𝑙 𝑜 𝑔 2 ( 𝑛 ) f(n)=3nlog 2 ​ (n)+100log 2 ​ (n). What is the tightest Big-O class for 𝑓 ( 𝑛 ) f(n)?|𝑂 ( 𝑛 𝑙 𝑜 𝑔 ( 𝑛 ) ) O(nlog(n))
Does the following equality give the tightest Big-O equivalence class? 𝑙 𝑜 𝑔 10 ( 𝑛 ) + 25 𝑙 𝑜 𝑔 5 ( 𝑛 ) = 𝑂 ( 𝑙 𝑜 𝑔 2 ( 𝑛 ) ) log 10 ​ (n)+25log 5 ​ (n)=O(log 2 ​ (n))|Yes
Consider the following code: 1 2 3 4 5 6 7 8 9 10 int sumSome(int[] arr){ int sum = 0; for (int i=0; i<arr.length; i++) { for (int j=0; j<arr.length; j+=2) { if (arr[i] > arr[j]) sum += arr[i]; } } return sum; } What is the tightest Big-O running time for this code in terms of the length of the array, 𝑛 n?|𝑂 ( 𝑛 2 ) O(n 2 )
Consider the following code: 1 2 3 4 5 6 7 8 9 10 int sumSome(int[] arr){ int sum = 0; for (int i=0; i<arr.length; i++) { for (int j=1; j<arr.length; j = j*2) { if (arr[i] > arr[j]) sum += arr[i]; } } return sum; } What is the tightest Big-O running time of this code in terms of the length of the array, 𝑛 n?|𝑂 ( 𝑛 𝑙 𝑜 𝑔 ( 𝑛 ) ) O(nlog(n))
You have two programs, program A and program B, that do the same thing. Program A runs in 𝑂 ( 𝑛 ) O(n) (tightest bound) and program B runs in 𝑂 ( 𝑛 2 ) O(n 2 ) (tightest bound) in the best, worst and average cases. A graph representing each program's behavior is shown below. This graph is an approximation of the real values. True or false: if you give both programs the same input, program A will always run faster than program B no matter what the input was.|False
You have two programs, program A and program B, that do the same thing, but may or may not contain exactly the same instructions. Both programs run in 𝑂 ( 𝑛 ) O(n) (tightest bound) in the best, worst and average cases. True or false: If you give both programs the same input, you can be sure they will take the same amount of time to complete no matter what the input was.|False
What is the tightest Big-O running time to calculate the Flesch readability score for the BasicDocument class, where n is the length of the document?|𝑂 ( 𝑛 ) O(n)
What is the tightest Big-O running time to calculate the Flesch readability score the first time in the EfficientDocument class, where n is the length of the document, assuming you include the time it takes to initialize the numSyllables, numWords, and numSentences variables? Note that this is not necessarily the running time that you saw when you plotted the graph of your EfficientDocument running time when you did your benchmarking. That time included the time to initialize the numSyllables, numWords and numSentences variables.|𝑂 ( 𝑛 ) O(n)
What is the tightest Big-O running time to calculate the Flesch readability score in the EfficientDocument class, where n is the length of the document, assuming you DO NOT include the time it takes to initialize the numSyllables, numWords, and numSentences variables (i.e. do not include the time taken by processText)?|𝑂 ( 1 ) O(1)
Which of the following graphs looks most like the graph you (should have) produced in part 2 of the programming assignment? We are looking for you to compare the shapes of the functions only--these graphs are much smoother than what you would have seen. Also, ignore the specific numbers, and concentrate on the shapes and the relationship between the two lines. Note that the correct answer assumes that you have correctly implemented your two Document classes and your DocumentBenchmarking class.|0.7849877572152764
How much time did you spend on the programming assignment?|4-5 hours
How difficult was the programming assignment?|Difficult
How much did you enjoy the programming assignment?|I did not enjoy the programming assignment